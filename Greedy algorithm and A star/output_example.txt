======================ИНИЦИАЛИЗАЦИЯ ГРАФА=====================
Стартовая вершина: a, конечная: e
Добавляем ребро a - b с весом 3.0
Добавляем ребро b - c с весом 1.0
Добавляем ребро c - d с весом 1.0
Добавляем к a смежную вершину d, вес ребра = 5.0
Добавляем ребро d - e с весом 1.0

Получившийся граф:
	Вершина: a, смежные: [['b', 3.0], ['d', 5.0]]
	Вершина: b, смежные: [['c', 1.0]]
	Вершина: c, смежные: [['d', 1.0]]
	Вершина: d, смежные: [['e', 1.0]]

[IND] Граф после сортировки смежных вершин по приоритету:
	Вершина: a, смежные: [['b', 3.0], ['d', 5.0]]
	Вершина: b, смежные: [['c', 1.0]]
	Вершина: c, смежные: [['d', 1.0]]
	Вершина: d, смежные: [['e', 1.0]]

=======================ЖАДНЫЙ АЛГОРИТМ========================
Стек на данный момент: [['a', 0]]
Достаем из стека вершину a
	Смежные с ней непосещенные вершины и расстояние до каждой: [['b', 3.0], ['d', 5.0]]
	Отсортируем в порядке невозрастания [['d', 5.0], ['b', 3.0]]
		Обновляем путь к вершине d и добавляем ее в стек
		Текущие пути {'d': 'a'}
		Обновляем путь к вершине b и добавляем ее в стек
		Текущие пути {'d': 'a', 'b': 'a'}
Переходим к следующей вершине
--------------------------------------------------------------
Стек на данный момент: [['d', 5.0], ['b', 3.0]]
Достаем из стека вершину b
	Смежные с ней непосещенные вершины и расстояние до каждой: [['c', 1.0]]
	Отсортируем в порядке невозрастания [['c', 1.0]]
		Обновляем путь к вершине c и добавляем ее в стек
		Текущие пути {'d': 'a', 'b': 'a', 'c': 'b'}
Переходим к следующей вершине
--------------------------------------------------------------
Стек на данный момент: [['d', 5.0], ['c', 1.0]]
Достаем из стека вершину c
	Смежные с ней непосещенные вершины и расстояние до каждой: [['d', 1.0]]
	Отсортируем в порядке невозрастания [['d', 1.0]]
		Обновляем путь к вершине d и добавляем ее в стек
		Текущие пути {'d': 'c', 'b': 'a', 'c': 'b'}
Переходим к следующей вершине
--------------------------------------------------------------
Стек на данный момент: [['d', 5.0], ['d', 1.0]]
Достаем из стека вершину d
	Смежные с ней непосещенные вершины и расстояние до каждой: [['e', 1.0]]
	Отсортируем в порядке невозрастания [['e', 1.0]]
		Обновляем путь к вершине e и добавляем ее в стек
		Текущие пути {'d': 'c', 'b': 'a', 'c': 'b', 'e': 'd'}
Переходим к следующей вершине
--------------------------------------------------------------
Стек на данный момент: [['d', 5.0], ['e', 1.0]]
Достаем из стека вершину e
Найдена конечная вершина, завершаем алгоритм
===========================================================
Полученный путь: abcde
	1. a -3.0-> b
	2. b -1.0-> c
	3. c -1.0-> d
	4. d -1.0-> e
	Длина пути: 6.0

=========================АЛГОРИТМ A*==========================
Очередь на данный момент: [(0, ['a', 0])]
Расстояния до вершин на данный момент: {'a': 0}
Достаем из очереди вершину ['a', 0]
	Смежные с данной вершиной: [['b', 3.0], ['d', 5.0]]
	Расстояние до вершины b = 3.0: расстояние до a = 0 + вес ребра a -> b = 3.0
		Полученное расстояние меньше текущего, обновим значение
		Близость символов b и e в таблице ASCII: 3
		Добавим вершину в очередь с приоритетом = 6.0: полученная стоимость = 3.0 + эвристика = 3
	Расстояние до вершины d = 5.0: расстояние до a = 0 + вес ребра a -> d = 5.0
		Полученное расстояние меньше текущего, обновим значение
		Близость символов d и e в таблице ASCII: 1
		Добавим вершину в очередь с приоритетом = 6.0: полученная стоимость = 5.0 + эвристика = 1
Переходим к следующей вершине
--------------------------------------------------------------
Очередь на данный момент: [(6.0, ['b', 3.0]), (6.0, ['d', 5.0])]
Расстояния до вершин на данный момент: {'a': 0, 'b': 3.0, 'd': 5.0}
Достаем из очереди вершину ['b', 3.0]
	Смежные с данной вершиной: [['c', 1.0]]
	Расстояние до вершины c = 4.0: расстояние до b = 3.0 + вес ребра b -> c = 1.0
		Полученное расстояние меньше текущего, обновим значение
		Близость символов c и e в таблице ASCII: 2
		Добавим вершину в очередь с приоритетом = 6.0: полученная стоимость = 4.0 + эвристика = 2
Переходим к следующей вершине
--------------------------------------------------------------
Очередь на данный момент: [(6.0, ['c', 1.0]), (6.0, ['d', 5.0])]
Расстояния до вершин на данный момент: {'a': 0, 'b': 3.0, 'd': 5.0, 'c': 4.0}
Достаем из очереди вершину ['c', 1.0]
	Смежные с данной вершиной: [['d', 1.0]]
	Расстояние до вершины d = 5.0: расстояние до c = 4.0 + вес ребра c -> d = 1.0
	Текущее расстояние до d = 5.0 <= полученного
Переходим к следующей вершине
--------------------------------------------------------------
Очередь на данный момент: [(6.0, ['d', 5.0])]
Расстояния до вершин на данный момент: {'a': 0, 'b': 3.0, 'd': 5.0, 'c': 4.0}
Достаем из очереди вершину ['d', 5.0]
	Смежные с данной вершиной: [['e', 1.0]]
	Расстояние до вершины e = 6.0: расстояние до d = 5.0 + вес ребра d -> e = 1.0
		Полученное расстояние меньше текущего, обновим значение
		Близость символов e и e в таблице ASCII: 0
		Добавим вершину в очередь с приоритетом = 6.0: полученная стоимость = 6.0 + эвристика = 0
Переходим к следующей вершине
--------------------------------------------------------------
Очередь на данный момент: [(6.0, ['e', 1.0])]
Расстояния до верщин на данный момент: {'a': 0, 'b': 3.0, 'd': 5.0, 'c': 4.0, 'e': 6.0}
Достаем из очереди вершину ['e', 1.0]
Найдена конечная вершина, заканчиваем алгоритм
==============================================================
Полученный путь: ade
	1. a -5.0-> d
	2. d -1.0-> e
	Длина пути: 6.0
